// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active Boolean    @default(true)
  senders Sender[]
  templates Template[]
  subscriptions Subscription[]
  emailUsages EmailUsage[]
}

model Plan {
  id                String         @id
  name              String
  isFree            Boolean
  emailLimit        Int
  isBranded         Boolean
  verifiedSenders   Int
  emailTemplates    Int
  subscriptions     Subscription[]
}

model Subscription {
  id  String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active  Boolean @default(true)
  renewalDate DateTime
  isTrial Boolean
  billingPeriod String
  pricingVersion  Int?
  organization  Organization @relation(fields:[organizationId], references: [id])
  organizationId String
  plan              Plan          @relation(fields: [planId], references: [id])
  planId            String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Sender {
  id      Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organization Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  name  String
  email   String
  status Int  @default(0)
}

model Template {
  id      Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organization Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  name String
  content String
}

model EmailUsage {
  id      Int      @id @default(autoincrement())
  organizationId    String
  emailsSent        Int
  periodStart       DateTime
  periodEnd         DateTime
  isCurrent         Boolean       @default(true)
  organization      Organization  @relation(fields: [organizationId], references: [id])
}
